[
  {
    "objectID": "pytranscribe.html",
    "href": "pytranscribe.html",
    "title": "PyTranscribe",
    "section": "",
    "text": "JsonToDictation\n\n JsonToDictation (speakers, data)\n\nA class that will convert the AWS Transcribe to Dictation\n\n\n\n\nDetails\n\n\n\n\nspeakers\n\n\n\ndata\nJSON data that has been generated by AWS Transcribe\n\n\n\n\nwith open('test_data/transcribe_example.json') as transcribe_file:\n  transcribe_json = json.load(transcribe_file)\n\nspeakers = (\"BOB\",\"JANE\")\ndictation = JsonToDictation(speakers,transcribe_json)\ndictation.summary()\n\nassert(dictation.num_speakers==2)\n\nself.num_speakers=2\nself.speakers=('BOB', 'JANE')\nself.speaker_map={'spk_0', 'spk_1'}\nspeakers=('BOB', 'JANE')\n\n\n\ntext = dictation.convert()\nprint (text)\nassert(text==\"BOB:\\tbeen on hold for an hour. \\nJANE:\\tSorry about that. \")\n\nBOB:    been on hold for an hour. \nJANE:   Sorry about that. \n\n\n\n\n\nAWSTranscribe\n\n AWSTranscribe (input_bucket, output_bucket, num_speakers,\n                input_file_name)\n\nA class that will upload audio files to s3 and then execute transcription jobs for them using AWSTranscribe\n\ninput_file_name = '../2023_02_27_11_49_35_CH12_MIX.mp3'\nawstrans = AWSTranscribe(os.environ['INPUT_BUCKET'],os.environ['OUTPUT_BUCKET'], 2, input_file_name)\n#awstrans.uploadFile(file_name)\nawstrans.printInputBucketContents()\n\n2023_02_27_11_49_35_CH12_MIX.mp3 2024-09-08 04:37:23+00:00\n\n\n\nawstrans.createTranscriptionJob()\n\nWaiting for job to complete...\nSucess.  File saved at s3://weinberg-dictations/2024-09-08--2023_02_27_11_49_35_CH12_MIX.json\n\n\n\nawstrans.downloadTranscription()\n\nDownload json transcription file from AWS (s3://weinberg-dictations/2024-09-08--2023_02_27_11_49_35_CH12_MIX.json to 2024-09-08--2023_02_27_11_49_35_CH12_MIX.json ...\nComplete\n\n\n'2024-09-08--2023_02_27_11_49_35_CH12_MIX.json'",
    "crumbs": [
      "PyTranscribe"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PyTranscribe",
    "section": "",
    "text": "poetry install\npoetry run jupter-lab",
    "crumbs": [
      "PyTranscribe"
    ]
  },
  {
    "objectID": "index.html#starting-notebook-server",
    "href": "index.html#starting-notebook-server",
    "title": "PyTranscribe",
    "section": "",
    "text": "poetry install\npoetry run jupter-lab",
    "crumbs": [
      "PyTranscribe"
    ]
  },
  {
    "objectID": "index.html#running-command-line-tool",
    "href": "index.html#running-command-line-tool",
    "title": "PyTranscribe",
    "section": "Running command-line tool",
    "text": "Running command-line tool\n❯ poetry run python transcribe.py\nusage: transcribe.py [-h] speakers input output\n\nExample:\n❯ poetry run python transcribe.py 2 nbs/data/transcribe_example.json out.txt\nReading json data...\nConverting json to conversational text...\nSaving text to file (out.txt)...\nsuccess.",
    "crumbs": [
      "PyTranscribe"
    ]
  }
]